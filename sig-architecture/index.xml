<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sig-architecture on Kubernetes Community</title>
    <link>/sig-architecture/</link>
    <description>Recent content in sig-architecture on Kubernetes Community</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/sig-architecture/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>backlog</title>
      <link>/sig-architecture/backlog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sig-architecture/backlog/</guid>
      <description>Backlog Processes  KEP process rollout and iteration New repo process API review process Conformance test suite change review process Escalation process Branching policy  SIG-related  Improve charter to meet expectations of Steering Committee Clarify criteria for areas out of scope for the SIG Formalize decision processes Identify subprojects/subefforts Determine initial reviewers and approvers How are SIG leads chosen  Documentation  Update What Is Kubernetes on the web site Architectural diagram Document who owns client library, build, and release artifacts Document who owns conformance definition, profiles, etc.</description>
    </item>
    
    <item>
      <title>charter</title>
      <link>/sig-architecture/charter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/sig-architecture/charter/</guid>
      <description>SIG Architecture Charter This charter is a WIP.
The Architecture SIG maintains and evolves the design principles of Kubernetes, and provides a consistent body of expertise necessary to ensure architectural consistency over time.
The scope covers issues that span all the system&amp;rsquo;s components, how they fit together, how they interact, etc.
Specific areas of focus include:
 Defining the scope of the Kubernetes project  What is (and is not) Kubernetes  Maintaining, evolving, and enforcing the deprecation policy  Deprecation policy  Documenting and evolving the system architecture  Kubernetes Design and Architecture  Defining and driving necessary extensibility points Establishing and documenting design principles  Design principles  Establishing and documenting conventions for system and user-facing APIs  API conventions  Developing necessary technical review processes, such as the proposal and API review processes Driving improvement of overall code organization, including github orgs and repositories Educating approvers/owners of other SIGs (e.</description>
    </item>
    
  </channel>
</rss>