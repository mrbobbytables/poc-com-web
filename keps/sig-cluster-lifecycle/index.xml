<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sig-cluster-lifecycle on Kubernetes Community</title>
    <link>/keps/sig-cluster-lifecycle/</link>
    <description>Recent content in sig-cluster-lifecycle on Kubernetes Community</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/keps/sig-cluster-lifecycle/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>0015-kubeadm-join-master</title>
      <link>/keps/sig-cluster-lifecycle/0015-kubeadm-join-master/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/keps/sig-cluster-lifecycle/0015-kubeadm-join-master/</guid>
      <description>kubeadm join &amp;ndash;master workflow Metadata --- kep-number: 15 title: kubeadm join --master workflow status: accepted authors: - &amp;#34;@fabriziopandini&amp;#34; owning-sig: sig-cluster-lifecycle reviewers: - &amp;#34;@chuckha‚Äù - &amp;#34;@detiber&amp;#34; - &amp;#34;@luxas&amp;#34; approvers: - &amp;#34;@luxas&amp;#34; - &amp;#34;@timothysc&amp;#34; editor: - &amp;#34;@fabriziopandini&amp;#34; creation-date: 2018-01-28 last-updated: 2018-06-29 see-also: - KEP 0004 Table of Contents  kubeadm join &amp;ndash;master workflow  Metadata Table of Contents Summary Motivation  Goals Non-goals Challenges and Open Questions  Proposal  User Stories  Create a cluster with more than one master nodes (static workflow) Add a new master node (dynamic workflow)  Implementation Details  Initialize the Kubernetes cluster Preparing for execution of kubeadm join &amp;ndash;master The kubeadm join &amp;ndash;master workflow dynamic workflow (advertise-address == controlplaneAddress) Static workflow (advertise-address !</description>
    </item>
    
    <item>
      <title>Kubeadm Config Draft</title>
      <link>/keps/sig-cluster-lifecycle/0008-20180504-kubeadm-config-beta/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/keps/sig-cluster-lifecycle/0008-20180504-kubeadm-config-beta/</guid>
      <description>Kubeadm Config to Beta Table of Contents A table of contents is helpful for quickly jumping to sections of a KEP and for highlighting any additional information provided beyond the standard KEP template.
Table of Contents
 Kubeadm Config to Beta  Table of Contents Summary Motivation  Goals Non-Goals  Proposal  User Stories [optional]  As a user upgrading with Kubeadm, I want the upgrade process to not fail with unfamiliar configuration.</description>
    </item>
    
    <item>
      <title>Kubernetes Bootstrap Checkpointing Proposal</title>
      <link>/keps/sig-cluster-lifecycle/0004-bootstrap-checkpointing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/keps/sig-cluster-lifecycle/0004-bootstrap-checkpointing/</guid>
      <description>Kubernetes Bootstrap Checkpointing Proposal Table of Contents  Summary Objectives  Goals Non-Goals  Proposal  User Stories  Graduation Criteria Implementation History Unresolved Questions  Summary There are several methods to deploy a kubernetes cluster, one method that offers some unique advantages is self hosting. The purpose of this proposal is to outline a method to checkpoint specific annotated pods, namely the control plane components, for the purpose of enabling self hosting.</description>
    </item>
    
    <item>
      <title>Kubernetes Cluster Management API</title>
      <link>/keps/sig-cluster-lifecycle/0003-cluster-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/keps/sig-cluster-lifecycle/0003-cluster-api/</guid>
      <description>Kubernetes Cluster Management API Table of Contents  Kubernetes Cluster Management API  Metadata Table of Contents Summary Motivation Goals Non-goals Challenges and Open Questions Proposal Driving Use Cases Cluster-level API Machine API  Capabilities Overview In-place vs. Replace Omitted Capabilities Conditions Types  Graduation Criteria Implementation History Drawbacks Alternatives   Summary We are building a set of Kubernetes cluster management APIs to enable common cluster lifecycle operations (install, upgrade, repair, delete) across disparate environments.</description>
    </item>
    
    <item>
      <title>Moving ComponentConfig API types to staging repos</title>
      <link>/keps/sig-cluster-lifecycle/0014-20180707-componentconfig-api-types-to-staging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/keps/sig-cluster-lifecycle/0014-20180707-componentconfig-api-types-to-staging/</guid>
      <description>Moving ComponentConfig API types to staging repos How we can start supporting reading versioned configuration for all our components after a code move for ComponentConfig to staging
Table of Contents  Moving ComponentConfig API types to staging repos  Table of Contents Summary  The current state of the world  Current kubelet Current kube-proxy Current kube-scheduler Current kube-controller-manager Current kube-apiserver Current cloud-controller-manager  Goals Non-goals Related proposals and further references  Proposal  Migration strategy per component or k8s.</description>
    </item>
    
  </channel>
</rss>